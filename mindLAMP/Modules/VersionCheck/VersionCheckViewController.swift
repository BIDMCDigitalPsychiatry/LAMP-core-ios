//
//  VersionCheckViewController.swift
//  mindLAMP
//
//  Created by Zco Engineer on 18/08/20.
//  Copyright (c) 2020 Division of Digital Psychiatry. All rights reserved.
//
//  This file was generated by the Swift MVP+VM Swift Xcode Templates
//
import UIKit
import Sensors

class VersionCheckViewController: UIViewController {
    
    //Pubic Vars
    @IBOutlet weak var infoLabel: UILabel!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    //Private Vars
    //let reachability = try! Reachability()
    let viewModel = VersionCheckViewModel()
    var versionCheckResponse: Dashboard.Response?
    
    //MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "Dashboard update"
        infoLabel.text = "Checking for new dashboard version..."
        
        viewModel.delegate = self
        viewModel.getDownloadURL { (response, err) in
            if let downloadURL = response?.url {
                if response?.version == UserDefaults.standard.version {
                    let delay = 2.0
                    self.infoLabel.text = "Dashboard is upto date. Navigating to Home screen"
                    DispatchQueue.main.asyncAfter(deadline: .now() + delay) { [weak self] in
                        guard let self = self else { return }
                        self.navigateToHome()
                    }
                } else {
                    self.versionCheckResponse = response
                    self.viewModel.downloadDashboard(downloadURL)
                }
            } else {
                if let error = err {
                    self.showAlert(error: error)
                } else {
                    self.navigateToHome()
                }

            }
        }
    }
    
    deinit {
        printDebug("\(String(describing: self)) is being deInitialized.\n")
    }

    func showAlert(error: Error) {
        if UserDefaults.standard.version == nil {
            
            let alert = UIAlertController(title: "alert.lamp.title".localized, message: error.localizedMessage, preferredStyle: .alert)
            let retryAction = UIAlertAction(title: "alert.button.retry".localized, style: .destructive, handler: { action in
             
            })
            alert.addAction(retryAction)
            self.present(alert, animated: true, completion: nil)
        } else {
            let alert = UIAlertController(title: "alert.lamp.title".localized, message: error.localizedMessage, preferredStyle: .alert)
            let retryAction = UIAlertAction(title: "alert.button.retry".localized, style: .destructive, handler: { action in
             
            })
            let homeAction = UIAlertAction(title: "alert.button.home".localized, style: .destructive, handler: { action in
                self.navigateToHome()
            })
            alert.addAction(retryAction)
            alert.addAction(homeAction)
            self.present(alert, animated: true, completion: nil)
        }
    }
}

// MARK: DownloadStatus
extension VersionCheckViewController: DownloadStatus {
    func downloadCompleted(isSuccess: Bool) {
        //save response data
        if let responseData = versionCheckResponse {
            UserDefaults.standard.version = responseData.version
            UserDefaults.standard.launchURL = responseData.launchURL
            UserDefaults.standard.nodeJSPath = responseData.nodeJSPath
            UserDefaults.standard.nodeRootFolder = responseData.nodeRootFolder
        }
        self.navigateToHome()
    }
    func setProgressText(_ text: String) {
        infoLabel.text = text
    }
}

// MARK: Private funtions
private extension VersionCheckViewController {
 
    func navigateToHome() {
        let appdelegate = UIApplication.shared.delegate as! AppDelegate
        let homeController = HomeViewController.getController()
        let navController = UINavigationController(rootViewController: homeController)
        appdelegate.window?.rootViewController = navController
    }
}

// MARK: VersionCheck_DisplayUI
extension VersionCheckViewController {
    func toggle(_ isLoading: Bool) {
    }
}
